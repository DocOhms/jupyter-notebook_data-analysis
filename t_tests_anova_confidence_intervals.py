{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "066dfd88-8e80-46a9-af07-eba49151605e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "__2.24 solution__\n",
      "\n",
      "(a) State hypotheses\n",
      " H0: μ1 = μ2 (the means are equal)\n",
      " H1: μ1 ≠ μ2 (the means are not equal)\n",
      "(b) T-statistic: 0.0000, P-value: 1.0000\n",
      "Conclusion: Fail to reject the null hypothesis.\n",
      "(c) P-value: 1.0000\n",
      "(c) 95% Confidence Interval: (-0.017746, 0.017746)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Title\n",
    "print(\"\\n__2.24 solution__\\n\")\n",
    "\n",
    "# Data for two machines\n",
    "machine_1 = np.array([16.03, 16.01, 16.02, 16.03, 16.04, 15.96, 15.97, 16.04,\n",
    "                       16.05, 15.98, 15.96, 16.02, 16.05, 16.02, 16.01, 16.01,\n",
    "                       16.02, 15.99, 15.99, 16.00])\n",
    "machine_2 = np.array([16.03, 16.01, 16.02, 16.03, 16.04, 15.96, 15.97, 16.04,\n",
    "                       16.05, 15.98, 15.96, 16.02, 16.05, 16.02, 16.01, 16.01,\n",
    "                       16.02, 15.99, 15.99, 16.00])\n",
    "\n",
    "# (a) State hypotheses\n",
    "# H0: μ1 = μ2 (the means are equal)\n",
    "# H1: μ1 ≠ μ2 (the means are not equal)\n",
    "print(f\"(a) State hypotheses\\n H0: μ1 = μ2 (the means are equal)\\n H1: μ1 ≠ μ2 (the means are not equal)\")\n",
    "\n",
    "# (b) Perform a two-sample t-test\n",
    "alpha = 0.05\n",
    "t_stat, p_value = stats.ttest_ind(machine_1, machine_2)\n",
    "print(f\"(b) T-statistic: {t_stat:.4f}, P-value: {p_value:.4f}\")\n",
    "\n",
    "# Conclusion\n",
    "if p_value < alpha:\n",
    "    conclusion = \"Reject the null hypothesis.\"\n",
    "else:\n",
    "    conclusion = \"Fail to reject the null hypothesis.\"\n",
    "print(f\"Conclusion: {conclusion}\")\n",
    "\n",
    "# (c) Find P-value\n",
    "print(f\"(c) P-value: {p_value:.4f}\")\n",
    "\n",
    "# (d) Calculate the 95% confidence interval\n",
    "mean_diff = np.mean(machine_1) - np.mean(machine_2)\n",
    "se_diff = np.sqrt(np.var(machine_1, ddof=1)/len(machine_1) + np.var(machine_2, ddof=1)/len(machine_2))\n",
    "margin_of_error = stats.t.ppf(1 - alpha/2, df=len(machine_1) + len(machine_2) - 2) * se_diff\n",
    "conf_interval = (mean_diff - margin_of_error, mean_diff + margin_of_error)\n",
    "print(f\"(c) 95% Confidence Interval: ({float(conf_interval[0]):.6f}, {float(conf_interval[1]):.6f})\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dd4fdb48-0652-451e-b5f3-8cdaec896a63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "__2.27 Solution__\n",
      "\n",
      "(a) T-statistic: -1.3498, P-value: 0.2068\n",
      "Conclusion (a): Fail to reject the null hypothesis: Flow rate does not affect average etch uniformity.\n",
      "(b) P-value: 0.2068\n",
      "(c) Levene's test statistic: 0.1883, P-value: 0.6735\n",
      "Conclusion (c): Fail to reject the null hypothesis: Flow rate does not affect wafer-to-wafer variability.\n",
      " \n",
      " \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Title\n",
    "print(\"\\n__2.27 Solution__\\n\")\n",
    "\n",
    "# Data two flow rates\n",
    "flow_rate_125 = np.array([2.7, 4.6, 2.6, 3.0, 3.2, 3.8])\n",
    "flow_rate_200 = np.array([4.6, 3.4, 2.9, 3.5, 4.1, 5.1])\n",
    "\n",
    "# (a) Test if the C2F6 flow rate affects average etch uniformity\n",
    "alpha = 0.05\n",
    "t_stat, p_value = stats.ttest_ind(flow_rate_125, flow_rate_200)\n",
    "print(f\"(a) T-statistic: {t_stat:.4f}, P-value: {p_value:.4f}\")\n",
    "\n",
    "# Conclusion for average etch uniformity\n",
    "if p_value < alpha:\n",
    "    conclusion_a = \"Reject the null hypothesis: Flow rate affects average etch uniformity.\"\n",
    "else:\n",
    "    conclusion_a = \"Fail to reject the null hypothesis: Flow rate does not affect average etch uniformity.\"\n",
    "print(f\"Conclusion (a): {conclusion_a}\")\n",
    "\n",
    "# (b) P-value part (a)\n",
    "print(f\"(b) P-value: {p_value:.4f}\")\n",
    "\n",
    "# (c) Test for wafer-to-wafer variability using Levene's test\n",
    "lev_stat, lev_p_value = stats.levene(flow_rate_125, flow_rate_200)\n",
    "print(f\"(c) Levene's test statistic: {lev_stat:.4f}, P-value: {lev_p_value:.4f}\")\n",
    "\n",
    "# Conclusion for wafer-to-wafer variability\n",
    "if lev_p_value < alpha:\n",
    "    conclusion_c = \"Reject the null hypothesis: Flow rate affects wafer-to-wafer variability.\"\n",
    "else:\n",
    "    conclusion_c = \"Fail to reject the null hypothesis: Flow rate does not affect wafer-to-wafer variability.\"\n",
    "print(f\"Conclusion (c): {conclusion_c}\\n \\n \\n\")\n",
    "\n",
    "# (d) Draw box plot for data\n",
    "plt.figure(figsize=(10, 6))  \n",
    "plt.boxplot([flow_rate_125, flow_rate_200], tick_labels=['125 SCCM', '200 SCCM'])\n",
    "plt.title('Box Plot of Etch Uniformity by C2F6 Flow Rate')\n",
    "plt.ylabel('Etch Uniformity')\n",
    "plt.grid(True, linestyle='--', alpha=0.7)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1bec866c-a15b-40a9-b4f0-0b3d68ea985c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "__2.32 Solution__\n",
      "\n",
      "(a) T-statistic: 0.4318, P-value: 0.6742\n",
      "Conclusion (a): Fail to reject the null hypothesis: There is no significant difference between the means.\n",
      "(b) P-value: 0.6742\n",
      "(c) 95% Confidence Interval: (-0.001024, 0.001524)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "\n",
    "# Title\n",
    "print(\"\\n__2.32 Solution__\\n\")\n",
    "\n",
    "# Data\n",
    "caliper_1 = np.array([0.265, 0.265, 0.266, 0.267, 0.267, 0.265, 0.267, 0.267, 0.265, 0.268, 0.268, 0.265])\n",
    "caliper_2 = np.array([0.264, 0.265, 0.264, 0.266, 0.267, 0.268, 0.264, 0.265, 0.265, 0.267, 0.268, 0.269])\n",
    "\n",
    "# (a) Paired t-test\n",
    "alpha = 0.05\n",
    "t_stat, p_value = stats.ttest_rel(caliper_1, caliper_2)\n",
    "print(f\"(a) T-statistic: {t_stat:.4f}, P-value: {p_value:.4f}\")\n",
    "\n",
    "# Conclusion\n",
    "if p_value < alpha:\n",
    "    conclusion_a = \"Reject the null hypothesis: There is a significant difference between the means.\"\n",
    "else:\n",
    "    conclusion_a = \"Fail to reject the null hypothesis: There is no significant difference between the means.\"\n",
    "print(f\"Conclusion (a): {conclusion_a}\")\n",
    "\n",
    "# (b) P-value for the test in part (a)\n",
    "print(f\"(b) P-value: {p_value:.4f}\")\n",
    "\n",
    "# (c) Confidence interval\n",
    "mean_diff = np.mean(caliper_1 - caliper_2)\n",
    "se_diff = stats.sem(caliper_1 - caliper_2)\n",
    "margin_of_error = stats.t.ppf(1 - alpha / 2, df=len(caliper_1) - 1) * se_diff\n",
    "conf_interval = (mean_diff - margin_of_error, mean_diff + margin_of_error)\n",
    "print(f\"(c) 95% Confidence Interval: ({float(conf_interval[0]):.6f}, {float(conf_interval[1]):.6f})\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fd47943-d009-43d8-a3b7-6f21fddfa0b3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
